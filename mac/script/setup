#!/usr/bin/env bash

# script/setup: Set up system for the first time after cloning

set -euo pipefail
IFS=$'\n\t'

shell_bin="/usr/local/bin/zsh"

setup () {
    cd "$(dirname "$0")/.."
    affirm "Have you authenticated with the App Store?"

    script/bootstrap
    msg_header "==> script/setup…"

    setup_secure_files
    setup_rc
    setup_shell
    setup_iterm
    setup_asdf
    setup_emacs
}

setup_secure_files () {
    msg_info "==> Setting up secure files…"
    affirm "Have you downloaded secure files from iCloud Drive?"

    local icloud_dir
    icloud_dir="${HOME}/Nextcloud/.dotfiles"

    if [! -f "${dot_dir}/local" ]; then
        ln -s "${icloud_dir}" "${dot_dir}/local"
    fi
}

setup_rc () {
    msg_info "==> Setting up RC files…"

    # Set this repo as the source directory.
    echo "DOTFILES_DIRS=\"${dot_dir}\"" >> ./rcrc

    env RCRC="${dot_dir}/rcrc" rcup
}

setup_shell () {
    msg_info "==> Setting up shell…"
    local shells="/etc/shells"

    if [ "$SHELL" = "$shell_bin" ]; then
        msg_info "default shell configured ($shell_bin)"
        return
    fi

    if [ ! -f $shell_bin ]; then
        msg_error "$shell_bin does not exist!"
        exit 1
    fi

    if ! file_contains $shells $shell_bin; then
        echo $shell_bin >> sudo tee -a $shells > /dev/null
    fi

    chsh -s $shell_bin
    msg_info "default shell configured ($shell_bin) ...restart required"
}

setup_iterm () {
    msg_info "==> Setting up iTerm2 preferences…"
    local dir
    local plist
    plist="com.googlecode.iterm2.plist"

    # Specify the preferences directory
    dir="$(pwd)/iTerm2"
    defaults write "${plist}" PrefsCustomFolder -string "${dir}"

    # Tell iTerm2 to use the custom preferences in the directory
    defaults write "${plist}" LoadPrefsFromCustomFolder -bool true
}

setup_emacs () {
    msg_info "==> Setting up Emacs…"
    local work_dir

    msg_info "==> Building elixir language server…"
    work_dir=$(pwd)
    ghq get elixir-lsp/elixir-ls
    cd "$(ghq list -p elixir-lsp/elixir-ls)"
    mix deps.get
    mix compile
    mix elixir_ls.release -o release
    cd "${work_dir}"

    ghq get hlissner/doom-emacs
    rm ~/.emacs.d
    ln -s "$(ghq list -p hlissner/doom-emacs)" ~/.emacs.d
    "$(ghq list -p hlissner/doom-emacs)"/bin/doom sync
    "$(ghq list -p hlissner/doom-emacs)"/bin/doom doctor
}

setup_asdf () {
    msg_info "==> Setting up global tools…"
    less asdf-plugins | xargs -n 1 asdf plugin add

    asdf install
}

if [[ "${#BASH_SOURCE[@]}" -eq 1 ]]; then
    script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
    dot_dir=$(dirname "$script_dir")
    # shellcheck source=./install
    source "${script_dir}/install"
    setup_colors
    setup "$@"
fi
